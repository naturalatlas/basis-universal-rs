/* automatically generated by rust-bindgen 0.71.1 */

#[repr(C)]
#[derive(Copy, Clone)]
pub struct basisu_color_rgba {
    pub __bindgen_anon_1: basisu_color_rgba__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union basisu_color_rgba__bindgen_ty_1 {
    pub m_comps: [u8; 4usize],
    pub __bindgen_anon_1: basisu_color_rgba__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct basisu_color_rgba__bindgen_ty_1__bindgen_ty_1 {
    pub r: u8,
    pub g: u8,
    pub b: u8,
    pub a: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of basisu_color_rgba__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<basisu_color_rgba__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Alignment of basisu_color_rgba__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<basisu_color_rgba__bindgen_ty_1__bindgen_ty_1>() - 1usize];
    ["Offset of field: basisu_color_rgba__bindgen_ty_1__bindgen_ty_1::r"]
        [::std::mem::offset_of!(basisu_color_rgba__bindgen_ty_1__bindgen_ty_1, r) - 0usize];
    ["Offset of field: basisu_color_rgba__bindgen_ty_1__bindgen_ty_1::g"]
        [::std::mem::offset_of!(basisu_color_rgba__bindgen_ty_1__bindgen_ty_1, g) - 1usize];
    ["Offset of field: basisu_color_rgba__bindgen_ty_1__bindgen_ty_1::b"]
        [::std::mem::offset_of!(basisu_color_rgba__bindgen_ty_1__bindgen_ty_1, b) - 2usize];
    ["Offset of field: basisu_color_rgba__bindgen_ty_1__bindgen_ty_1::a"]
        [::std::mem::offset_of!(basisu_color_rgba__bindgen_ty_1__bindgen_ty_1, a) - 3usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of basisu_color_rgba__bindgen_ty_1"]
        [::std::mem::size_of::<basisu_color_rgba__bindgen_ty_1>() - 4usize];
    ["Alignment of basisu_color_rgba__bindgen_ty_1"]
        [::std::mem::align_of::<basisu_color_rgba__bindgen_ty_1>() - 1usize];
    ["Offset of field: basisu_color_rgba__bindgen_ty_1::m_comps"]
        [::std::mem::offset_of!(basisu_color_rgba__bindgen_ty_1, m_comps) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of basisu_color_rgba"][::std::mem::size_of::<basisu_color_rgba>() - 4usize];
    ["Alignment of basisu_color_rgba"][::std::mem::align_of::<basisu_color_rgba>() - 1usize];
};
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct basisu_image {
    pub _bindgen_opaque_blob: [u64; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of basisu_image"][::std::mem::size_of::<basisu_image>() - 40usize];
    ["Alignment of basisu_image"][::std::mem::align_of::<basisu_image>() - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}__ZN6basisu5image10debug_textEjjjjRKNS_10color_rgbaEPS2_bPKcz"]
    pub fn basisu_image_debug_text(
        this: *mut basisu_image,
        x_ofs: u32,
        y_ofs: u32,
        x_scale: u32,
        y_scale: u32,
        fg: *const basisu_color_rgba,
        pBG: *const basisu_color_rgba,
        alpha_only: bool,
        p: *const ::std::os::raw::c_char,
        ...
    );
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct basisu_imagef {
    pub _bindgen_opaque_blob: [u64; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of basisu_imagef"][::std::mem::size_of::<basisu_imagef>() - 40usize];
    ["Alignment of basisu_imagef"][::std::mem::align_of::<basisu_imagef>() - 8usize];
};
pub const basisu_TOTAL_PACK_UASTC_LEVELS: u32 = 5;
pub const basisu_BASISU_MAX_SUPPORTED_TEXTURE_DIMENSION: u32 = 16384;
pub const basisu_BASISU_DEFAULT_ENDPOINT_RDO_THRESH: f32 = 1.5;
pub const basisu_BASISU_DEFAULT_SELECTOR_RDO_THRESH: f32 = 1.25;
pub const basisu_BASISU_DEFAULT_QUALITY: ::std::os::raw::c_int = 128;
pub const basisu_BASISU_DEFAULT_HYBRID_SEL_CB_QUALITY_THRESH: f32 = 2.0;
pub const basisu_BASISU_MAX_IMAGE_DIMENSION: u32 = 16384;
pub const basisu_BASISU_QUALITY_MIN: u32 = 1;
pub const basisu_BASISU_QUALITY_MAX: u32 = 255;
pub const basisu_BASISU_MAX_ENDPOINT_CLUSTERS: u32 = 16128;
pub const basisu_BASISU_MAX_SELECTOR_CLUSTERS: u32 = 16128;
pub const basisu_BASISU_MAX_SLICES: u32 = 16777215;
pub const basisu_BASISU_RDO_UASTC_DICT_SIZE_DEFAULT: ::std::os::raw::c_int = 4096;
pub const basisu_BASISU_RDO_UASTC_DICT_SIZE_MIN: ::std::os::raw::c_int = 64;
pub const basisu_BASISU_RDO_UASTC_DICT_SIZE_MAX: ::std::os::raw::c_int = 65536;
pub const basisu_hdr_modes_cUASTC_HDR_4X4: basisu_hdr_modes = 0;
pub const basisu_hdr_modes_cASTC_HDR_6X6: basisu_hdr_modes = 1;
pub const basisu_hdr_modes_cASTC_HDR_6X6_INTERMEDIATE: basisu_hdr_modes = 2;
pub const basisu_hdr_modes_cTotal: basisu_hdr_modes = 3;
pub type basisu_hdr_modes = ::std::os::raw::c_int;
pub const basisu_basis_compressor_error_code_cECSuccess: basisu_basis_compressor_error_code = 0;
pub const basisu_basis_compressor_error_code_cECFailedInitializing:
    basisu_basis_compressor_error_code = 1;
pub const basisu_basis_compressor_error_code_cECFailedReadingSourceImages:
    basisu_basis_compressor_error_code = 2;
pub const basisu_basis_compressor_error_code_cECFailedValidating:
    basisu_basis_compressor_error_code = 3;
pub const basisu_basis_compressor_error_code_cECFailedEncodeUASTC:
    basisu_basis_compressor_error_code = 4;
pub const basisu_basis_compressor_error_code_cECFailedFrontEnd: basisu_basis_compressor_error_code =
    5;
pub const basisu_basis_compressor_error_code_cECFailedFontendExtract:
    basisu_basis_compressor_error_code = 6;
pub const basisu_basis_compressor_error_code_cECFailedBackend: basisu_basis_compressor_error_code =
    7;
pub const basisu_basis_compressor_error_code_cECFailedCreateBasisFile:
    basisu_basis_compressor_error_code = 8;
pub const basisu_basis_compressor_error_code_cECFailedWritingOutput:
    basisu_basis_compressor_error_code = 9;
pub const basisu_basis_compressor_error_code_cECFailedUASTCRDOPostProcess:
    basisu_basis_compressor_error_code = 10;
pub const basisu_basis_compressor_error_code_cECFailedCreateKTX2File:
    basisu_basis_compressor_error_code = 11;
pub type basisu_basis_compressor_error_code = ::std::os::raw::c_uint;
pub const basist_basis_tex_format_cETC1S: basist_basis_tex_format = 0;
pub const basist_basis_tex_format_cUASTC4x4: basist_basis_tex_format = 1;
pub const basist_basis_tex_format_cUASTC_HDR_4x4: basist_basis_tex_format = 2;
pub const basist_basis_tex_format_cASTC_HDR_6x6: basist_basis_tex_format = 3;
pub const basist_basis_tex_format_cASTC_HDR_6x6_INTERMEDIATE: basist_basis_tex_format = 4;
pub const basist_basis_tex_format_cTotalFormats: basist_basis_tex_format = 5;
pub type basist_basis_tex_format = ::std::os::raw::c_int;
pub const basist_ktx2_supercompression_KTX2_SS_NONE: basist_ktx2_supercompression = 0;
pub const basist_ktx2_supercompression_KTX2_SS_BASISLZ: basist_ktx2_supercompression = 1;
pub const basist_ktx2_supercompression_KTX2_SS_ZSTANDARD: basist_ktx2_supercompression = 2;
pub const basist_ktx2_supercompression_KTX2_SS_BASIS: basist_ktx2_supercompression = 3;
pub type basist_ktx2_supercompression = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union ColorU8 {
    pub channels: ColorU8_Channels,
    pub components: [u8; 4usize],
    pub combined: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ColorU8_Channels {
    pub r: u8,
    pub g: u8,
    pub b: u8,
    pub a: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ColorU8_Channels"][::std::mem::size_of::<ColorU8_Channels>() - 4usize];
    ["Alignment of ColorU8_Channels"][::std::mem::align_of::<ColorU8_Channels>() - 1usize];
    ["Offset of field: ColorU8_Channels::r"][::std::mem::offset_of!(ColorU8_Channels, r) - 0usize];
    ["Offset of field: ColorU8_Channels::g"][::std::mem::offset_of!(ColorU8_Channels, g) - 1usize];
    ["Offset of field: ColorU8_Channels::b"][::std::mem::offset_of!(ColorU8_Channels, b) - 2usize];
    ["Offset of field: ColorU8_Channels::a"][::std::mem::offset_of!(ColorU8_Channels, a) - 3usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ColorU8"][::std::mem::size_of::<ColorU8>() - 4usize];
    ["Alignment of ColorU8"][::std::mem::align_of::<ColorU8>() - 4usize];
    ["Offset of field: ColorU8::channels"][::std::mem::offset_of!(ColorU8, channels) - 0usize];
    ["Offset of field: ColorU8::components"][::std::mem::offset_of!(ColorU8, components) - 0usize];
    ["Offset of field: ColorU8::combined"][::std::mem::offset_of!(ColorU8, combined) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union ColorF {
    pub channels: ColorF_Channels,
    pub components: [f32; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ColorF_Channels {
    pub r: f32,
    pub g: f32,
    pub b: f32,
    pub a: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ColorF_Channels"][::std::mem::size_of::<ColorF_Channels>() - 16usize];
    ["Alignment of ColorF_Channels"][::std::mem::align_of::<ColorF_Channels>() - 4usize];
    ["Offset of field: ColorF_Channels::r"][::std::mem::offset_of!(ColorF_Channels, r) - 0usize];
    ["Offset of field: ColorF_Channels::g"][::std::mem::offset_of!(ColorF_Channels, g) - 4usize];
    ["Offset of field: ColorF_Channels::b"][::std::mem::offset_of!(ColorF_Channels, b) - 8usize];
    ["Offset of field: ColorF_Channels::a"][::std::mem::offset_of!(ColorF_Channels, a) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ColorF"][::std::mem::size_of::<ColorF>() - 16usize];
    ["Alignment of ColorF"][::std::mem::align_of::<ColorF>() - 4usize];
    ["Offset of field: ColorF::channels"][::std::mem::offset_of!(ColorF, channels) - 0usize];
    ["Offset of field: ColorF::components"][::std::mem::offset_of!(ColorF, components) - 0usize];
};
pub const UastcPackFlags_PackUASTCLevelFastest: UastcPackFlags = 0;
pub const UastcPackFlags_PackUASTCLevelFaster: UastcPackFlags = 1;
pub const UastcPackFlags_PackUASTCLevelDefault: UastcPackFlags = 2;
pub const UastcPackFlags_PackUASTCLevelSlower: UastcPackFlags = 3;
pub const UastcPackFlags_PackUASTCLevelVerySlow: UastcPackFlags = 4;
pub const UastcPackFlags_PackUASTCLevelMask: UastcPackFlags = 15;
pub const UastcPackFlags_PackUASTCFavorUASTCError: UastcPackFlags = 8;
pub const UastcPackFlags_PackUASTCFavorBC7Error: UastcPackFlags = 16;
pub const UastcPackFlags_PackUASTCETC1FasterHints: UastcPackFlags = 64;
pub const UastcPackFlags_PackUASTCETC1FastestHints: UastcPackFlags = 128;
pub const UastcPackFlags_PackUASTCETC1DisableFlipAndIndividual: UastcPackFlags = 256;
pub type UastcPackFlags = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn image_resize_with_pitch(
        image: *mut basisu_image,
        w: u32,
        h: u32,
        p: u32,
    );
}
unsafe extern "C" {
    pub fn image_resize(
        image: *mut basisu_image,
        w: u32,
        h: u32,
    );
}
unsafe extern "C" {
    pub fn image_init(
        image: *mut basisu_image,
        pData: *const u8,
        width: u32,
        height: u32,
        comps: u32,
    );
}
unsafe extern "C" {
    pub fn image_get_pixel_at_checked(
        image: *mut basisu_image,
        x: u32,
        y: u32,
        pOutColor: *mut ColorU8,
    ) -> bool;
}
unsafe extern "C" {
    pub fn image_get_pixel_at_unchecked(
        image: *mut basisu_image,
        x: u32,
        y: u32,
    ) -> ColorU8;
}
unsafe extern "C" {
    pub fn image_get_width(image: *mut basisu_image) -> u32;
}
unsafe extern "C" {
    pub fn image_get_height(image: *mut basisu_image) -> u32;
}
unsafe extern "C" {
    pub fn image_get_pitch(image: *mut basisu_image) -> u32;
}
unsafe extern "C" {
    pub fn image_get_total_pixels(image: *mut basisu_image) -> u32;
}
unsafe extern "C" {
    pub fn image_get_block_width(
        image: *mut basisu_image,
        w: u32,
    ) -> u32;
}
unsafe extern "C" {
    pub fn image_get_block_height(
        image: *mut basisu_image,
        h: u32,
    ) -> u32;
}
unsafe extern "C" {
    pub fn image_get_total_blocks(
        image: *mut basisu_image,
        w: u32,
        h: u32,
    ) -> u32;
}
unsafe extern "C" {
    pub fn image_clear(image: *mut basisu_image);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PixelData {
    pub pData: *mut ColorU8,
    pub length: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PixelData"][::std::mem::size_of::<PixelData>() - 16usize];
    ["Alignment of PixelData"][::std::mem::align_of::<PixelData>() - 8usize];
    ["Offset of field: PixelData::pData"][::std::mem::offset_of!(PixelData, pData) - 0usize];
    ["Offset of field: PixelData::length"][::std::mem::offset_of!(PixelData, length) - 8usize];
};
unsafe extern "C" {
    pub fn image_get_pixel_data(image: *mut basisu_image) -> PixelData;
}
unsafe extern "C" {
    pub fn imagef_resize_with_pitch(
        image: *mut basisu_imagef,
        w: u32,
        h: u32,
        p: u32,
    );
}
unsafe extern "C" {
    pub fn imagef_resize(
        image: *mut basisu_imagef,
        w: u32,
        h: u32,
    );
}
unsafe extern "C" {
    pub fn imagef_init(
        image: *mut basisu_imagef,
        pData: *const f32,
        width: u32,
        height: u32,
        comps: u32,
    );
}
unsafe extern "C" {
    pub fn imagef_get_pixel_at_checked(
        image: *mut basisu_imagef,
        x: u32,
        y: u32,
        pOutColor: *mut ColorF,
    ) -> bool;
}
unsafe extern "C" {
    pub fn imagef_get_pixel_at_unchecked(
        image: *mut basisu_imagef,
        x: u32,
        y: u32,
    ) -> ColorF;
}
unsafe extern "C" {
    pub fn imagef_get_width(image: *mut basisu_imagef) -> u32;
}
unsafe extern "C" {
    pub fn imagef_get_height(image: *mut basisu_imagef) -> u32;
}
unsafe extern "C" {
    pub fn imagef_get_pitch(image: *mut basisu_imagef) -> u32;
}
unsafe extern "C" {
    pub fn imagef_get_total_pixels(image: *mut basisu_imagef) -> u32;
}
unsafe extern "C" {
    pub fn imagef_get_block_width(
        image: *mut basisu_imagef,
        w: u32,
    ) -> u32;
}
unsafe extern "C" {
    pub fn imagef_get_block_height(
        image: *mut basisu_imagef,
        h: u32,
    ) -> u32;
}
unsafe extern "C" {
    pub fn imagef_get_total_blocks(
        image: *mut basisu_imagef,
        w: u32,
        h: u32,
    ) -> u32;
}
unsafe extern "C" {
    pub fn imagef_clear(image: *mut basisu_imagef);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HdrPixelData {
    pub pData: *mut ColorF,
    pub length: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HdrPixelData"][::std::mem::size_of::<HdrPixelData>() - 16usize];
    ["Alignment of HdrPixelData"][::std::mem::align_of::<HdrPixelData>() - 8usize];
    ["Offset of field: HdrPixelData::pData"][::std::mem::offset_of!(HdrPixelData, pData) - 0usize];
    ["Offset of field: HdrPixelData::length"]
        [::std::mem::offset_of!(HdrPixelData, length) - 8usize];
};
unsafe extern "C" {
    pub fn imagef_get_pixel_data(image: *mut basisu_imagef) -> HdrPixelData;
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct CompressorParams {
    pub _bindgen_opaque_blob: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CompressorParams"][::std::mem::size_of::<CompressorParams>() - 8usize];
    ["Alignment of CompressorParams"][::std::mem::align_of::<CompressorParams>() - 8usize];
};
unsafe extern "C" {
    pub fn compressor_params_new() -> *mut CompressorParams;
}
unsafe extern "C" {
    pub fn compressor_params_delete(params: *mut CompressorParams);
}
unsafe extern "C" {
    pub fn compressor_params_clear(params: *mut CompressorParams);
}
unsafe extern "C" {
    pub fn compressor_params_get_or_create_source_image(
        params: *mut CompressorParams,
        index: u32,
    ) -> *mut basisu_image;
}
unsafe extern "C" {
    pub fn compressor_params_resize_source_image_list(
        params: *mut CompressorParams,
        size: usize,
    );
}
unsafe extern "C" {
    pub fn compressor_params_clear_source_image_list(params: *mut CompressorParams);
}
unsafe extern "C" {
    pub fn compressor_params_get_or_create_source_hdr_image(
        params: *mut CompressorParams,
        index: u32,
    ) -> *mut basisu_imagef;
}
unsafe extern "C" {
    pub fn compressor_params_resize_source_hdr_image_list(
        params: *mut CompressorParams,
        size: usize,
    );
}
unsafe extern "C" {
    pub fn compressor_params_clear_source_hdr_image_list(params: *mut CompressorParams);
}
unsafe extern "C" {
    pub fn compressor_params_get_or_create_source_mipmap_image(
        params: *mut CompressorParams,
        index: u32,
        level: u32,
    ) -> *mut basisu_image;
}
unsafe extern "C" {
    pub fn compressor_params_resize_source_mipmap_image_list(
        params: *mut CompressorParams,
        size: usize,
    );
}
unsafe extern "C" {
    pub fn compressor_params_resize_source_mipmap_image_level_list(
        params: *mut CompressorParams,
        level: usize,
        size: usize,
    );
}
unsafe extern "C" {
    pub fn compressor_params_clear_source_mipmap_image_list(params: *mut CompressorParams);
}
unsafe extern "C" {
    pub fn compressor_params_set_status_output(
        params: *mut CompressorParams,
        status_output: bool,
    );
}
unsafe extern "C" {
    pub fn compressor_params_set_quality_level(
        params: *mut CompressorParams,
        quality_level: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn compressor_params_get_pack_uastc_flags(params: *mut CompressorParams) -> UastcPackFlags;
}
unsafe extern "C" {
    pub fn compressor_params_set_pack_uastc_flags(
        params: *mut CompressorParams,
        pack_uastc_flags: UastcPackFlags,
    );
}
unsafe extern "C" {
    pub fn compressor_params_set_format_mode(
        params: *mut CompressorParams,
        m: basist_basis_tex_format,
    );
}
unsafe extern "C" {
    pub fn compressor_params_set_perceptual(
        params: *mut CompressorParams,
        perceptual: bool,
    );
}
unsafe extern "C" {
    pub fn compressor_params_set_mip_srgb(
        params: *mut CompressorParams,
        mip_srgb: bool,
    );
}
unsafe extern "C" {
    pub fn compressor_params_set_no_selector_rdo(
        params: *mut CompressorParams,
        no_selector_rdo: bool,
    );
}
unsafe extern "C" {
    pub fn compressor_params_set_no_endpoint_rdo(
        params: *mut CompressorParams,
        no_endpoint_rdo: bool,
    );
}
unsafe extern "C" {
    pub fn compressor_params_set_rdo_uastc(
        params: *mut CompressorParams,
        rdo_uastc: bool,
    );
}
unsafe extern "C" {
    pub fn compressor_params_set_rdo_uastc_quality_scalar(
        params: *mut CompressorParams,
        rdo_uastc_quality_scalar: f32,
    );
}
unsafe extern "C" {
    pub fn compressor_params_set_generate_mipmaps(
        params: *mut CompressorParams,
        generate_mipmaps: bool,
    );
}
unsafe extern "C" {
    pub fn compressor_params_set_mip_smallest_dimension(
        params: *mut CompressorParams,
        mip_smallest_dimension: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn compressor_params_set_mip_fast(
        params: *mut CompressorParams,
        mip_fast: bool,
    );
}
unsafe extern "C" {
    pub fn compressor_params_set_hdr(
        params: *mut CompressorParams,
        hdr: bool,
    );
}
unsafe extern "C" {
    pub fn compressor_params_set_hdr_mode(
        params: *mut CompressorParams,
        hdr_mode: basisu_hdr_modes,
    );
}
unsafe extern "C" {
    pub fn compressor_params_set_hdr_favor_astc(
        params: *mut CompressorParams,
        favor_astc: bool,
    );
}
unsafe extern "C" {
    pub fn compressor_params_set_create_ktx2_file(
        params: *mut CompressorParams,
        ktx2_file: bool,
    );
}
unsafe extern "C" {
    pub fn compressor_params_set_ktx2_srgb_transfer_func(
        params: *mut CompressorParams,
        srgb: bool,
    );
}
unsafe extern "C" {
    pub fn compressor_params_set_ktx2_uastc_supercompression(
        params: *mut CompressorParams,
        supercompression: basist_ktx2_supercompression,
    );
}
unsafe extern "C" {
    pub fn compressor_params_set_ktx2_zstd_supercompression_level(
        params: *mut CompressorParams,
        level: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn compressor_params_set_userdata(
        params: *mut CompressorParams,
        userdata0: u32,
        userdata1: u32,
    );
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct Compressor {
    pub _bindgen_opaque_blob: [u64; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Compressor"][::std::mem::size_of::<Compressor>() - 16usize];
    ["Alignment of Compressor"][::std::mem::align_of::<Compressor>() - 8usize];
};
unsafe extern "C" {
    pub fn compressor_new(num_threads: ::std::os::raw::c_int) -> *mut Compressor;
}
unsafe extern "C" {
    pub fn compressor_delete(compressor: *mut Compressor);
}
unsafe extern "C" {
    pub fn compressor_init(
        compressor: *mut Compressor,
        params: *const CompressorParams,
    ) -> bool;
}
unsafe extern "C" {
    pub fn compressor_process(compressor: *mut Compressor) -> basisu_basis_compressor_error_code;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CompressorBasisFile {
    pub pData: *const u8,
    pub length: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CompressorBasisFile"][::std::mem::size_of::<CompressorBasisFile>() - 16usize];
    ["Alignment of CompressorBasisFile"][::std::mem::align_of::<CompressorBasisFile>() - 8usize];
    ["Offset of field: CompressorBasisFile::pData"]
        [::std::mem::offset_of!(CompressorBasisFile, pData) - 0usize];
    ["Offset of field: CompressorBasisFile::length"]
        [::std::mem::offset_of!(CompressorBasisFile, length) - 8usize];
};
unsafe extern "C" {
    pub fn compressor_get_output_basis_file(compressor: *mut Compressor) -> CompressorBasisFile;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CompressorKtx2File {
    pub pData: *const u8,
    pub length: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CompressorKtx2File"][::std::mem::size_of::<CompressorKtx2File>() - 16usize];
    ["Alignment of CompressorKtx2File"][::std::mem::align_of::<CompressorKtx2File>() - 8usize];
    ["Offset of field: CompressorKtx2File::pData"]
        [::std::mem::offset_of!(CompressorKtx2File, pData) - 0usize];
    ["Offset of field: CompressorKtx2File::length"]
        [::std::mem::offset_of!(CompressorKtx2File, length) - 8usize];
};
unsafe extern "C" {
    pub fn compressor_get_output_ktx2_file(compressor: *mut Compressor) -> CompressorKtx2File;
}
unsafe extern "C" {
    pub fn compressor_get_basis_file_size(compressor: *const Compressor) -> u32;
}
unsafe extern "C" {
    pub fn compressor_get_basis_bits_per_texel(compressor: *const Compressor) -> f64;
}
unsafe extern "C" {
    pub fn compressor_get_any_source_image_has_alpha(compressor: *const Compressor) -> bool;
}
unsafe extern "C" {
    pub fn basisu_encoder_init();
}
