/* automatically generated by rust-bindgen 0.71.1 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct basisu_rel_ops {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct basisu_vector<T> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
    pub m_p: *mut T,
    pub m_size: usize,
    pub m_capacity: usize,
}
pub type basisu_vector_iterator<T> = *mut T;
pub type basisu_vector_const_iterator<T> = *const T;
pub type basisu_vector_value_type<T> = T;
pub type basisu_vector_reference<T> = *mut T;
pub type basisu_vector_const_reference<T> = *const T;
pub type basisu_vector_pointer<T> = *mut T;
pub type basisu_vector_const_pointer<T> = *const T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct basisu_vector_is_vector {
    pub _address: u8,
}
pub const basisu_vector_is_vector_cFlag: basisu_vector_is_vector__bindgen_ty_1 = 0;
pub type basisu_vector_is_vector__bindgen_ty_1 = i32;
pub type basisu_uint8_vec = basisu_vector<u8>;
pub const basisu_texture_format_cInvalidTextureFormat: basisu_texture_format = -1;
pub const basisu_texture_format_cETC1: basisu_texture_format = 0;
pub const basisu_texture_format_cETC1S: basisu_texture_format = 1;
pub const basisu_texture_format_cETC2_RGB: basisu_texture_format = 2;
pub const basisu_texture_format_cETC2_RGBA: basisu_texture_format = 3;
pub const basisu_texture_format_cETC2_ALPHA: basisu_texture_format = 4;
pub const basisu_texture_format_cBC1: basisu_texture_format = 5;
pub const basisu_texture_format_cBC3: basisu_texture_format = 6;
pub const basisu_texture_format_cBC4: basisu_texture_format = 7;
pub const basisu_texture_format_cBC5: basisu_texture_format = 8;
pub const basisu_texture_format_cBC6HSigned: basisu_texture_format = 9;
pub const basisu_texture_format_cBC6HUnsigned: basisu_texture_format = 10;
pub const basisu_texture_format_cBC7: basisu_texture_format = 11;
pub const basisu_texture_format_cASTC_LDR_4x4: basisu_texture_format = 12;
pub const basisu_texture_format_cASTC_HDR_4x4: basisu_texture_format = 13;
pub const basisu_texture_format_cASTC_HDR_6x6: basisu_texture_format = 14;
pub const basisu_texture_format_cPVRTC1_4_RGB: basisu_texture_format = 15;
pub const basisu_texture_format_cPVRTC1_4_RGBA: basisu_texture_format = 16;
pub const basisu_texture_format_cATC_RGB: basisu_texture_format = 17;
pub const basisu_texture_format_cATC_RGBA_INTERPOLATED_ALPHA: basisu_texture_format = 18;
pub const basisu_texture_format_cFXT1_RGB: basisu_texture_format = 19;
pub const basisu_texture_format_cPVRTC2_4_RGBA: basisu_texture_format = 20;
pub const basisu_texture_format_cETC2_R11_EAC: basisu_texture_format = 21;
pub const basisu_texture_format_cETC2_RG11_EAC: basisu_texture_format = 22;
pub const basisu_texture_format_cUASTC4x4: basisu_texture_format = 23;
pub const basisu_texture_format_cUASTC_HDR_4x4: basisu_texture_format = 24;
pub const basisu_texture_format_cBC1_NV: basisu_texture_format = 25;
pub const basisu_texture_format_cBC1_AMD: basisu_texture_format = 26;
pub const basisu_texture_format_cRGBA32: basisu_texture_format = 27;
pub const basisu_texture_format_cRGB565: basisu_texture_format = 28;
pub const basisu_texture_format_cBGR565: basisu_texture_format = 29;
pub const basisu_texture_format_cRGBA4444: basisu_texture_format = 30;
pub const basisu_texture_format_cABGR4444: basisu_texture_format = 31;
pub const basisu_texture_format_cRGBA_HALF: basisu_texture_format = 32;
pub const basisu_texture_format_cRGB_HALF: basisu_texture_format = 33;
pub const basisu_texture_format_cRGB_9E5: basisu_texture_format = 34;
pub type basisu_texture_format = ::std::os::raw::c_int;
pub const basist_block_format_cETC1: basist_block_format = 0;
pub const basist_block_format_cETC2_RGBA: basist_block_format = 1;
pub const basist_block_format_cBC1: basist_block_format = 2;
pub const basist_block_format_cBC3: basist_block_format = 3;
pub const basist_block_format_cBC4: basist_block_format = 4;
pub const basist_block_format_cBC5: basist_block_format = 5;
pub const basist_block_format_cPVRTC1_4_RGB: basist_block_format = 6;
pub const basist_block_format_cPVRTC1_4_RGBA: basist_block_format = 7;
pub const basist_block_format_cBC7: basist_block_format = 8;
pub const basist_block_format_cBC7_M5_COLOR: basist_block_format = 9;
pub const basist_block_format_cBC7_M5_ALPHA: basist_block_format = 10;
pub const basist_block_format_cETC2_EAC_A8: basist_block_format = 11;
pub const basist_block_format_cASTC_4x4: basist_block_format = 12;
pub const basist_block_format_cATC_RGB: basist_block_format = 13;
pub const basist_block_format_cATC_RGBA_INTERPOLATED_ALPHA: basist_block_format = 14;
pub const basist_block_format_cFXT1_RGB: basist_block_format = 15;
pub const basist_block_format_cPVRTC2_4_RGB: basist_block_format = 16;
pub const basist_block_format_cPVRTC2_4_RGBA: basist_block_format = 17;
pub const basist_block_format_cETC2_EAC_R11: basist_block_format = 18;
pub const basist_block_format_cETC2_EAC_RG11: basist_block_format = 19;
pub const basist_block_format_cIndices: basist_block_format = 20;
pub const basist_block_format_cRGB32: basist_block_format = 21;
pub const basist_block_format_cRGBA32: basist_block_format = 22;
pub const basist_block_format_cA32: basist_block_format = 23;
pub const basist_block_format_cRGB565: basist_block_format = 24;
pub const basist_block_format_cBGR565: basist_block_format = 25;
pub const basist_block_format_cRGBA4444_COLOR: basist_block_format = 26;
pub const basist_block_format_cRGBA4444_ALPHA: basist_block_format = 27;
pub const basist_block_format_cRGBA4444_COLOR_OPAQUE: basist_block_format = 28;
pub const basist_block_format_cRGBA4444: basist_block_format = 29;
pub const basist_block_format_cRGBA_HALF: basist_block_format = 30;
pub const basist_block_format_cRGB_HALF: basist_block_format = 31;
pub const basist_block_format_cRGB_9E5: basist_block_format = 32;
pub const basist_block_format_cUASTC_4x4: basist_block_format = 33;
pub const basist_block_format_cUASTC_HDR_4x4: basist_block_format = 34;
pub const basist_block_format_cBC6H: basist_block_format = 35;
pub const basist_block_format_cASTC_HDR_4x4: basist_block_format = 36;
pub const basist_block_format_cASTC_HDR_6x6: basist_block_format = 37;
pub const basist_block_format_cTotalBlockFormats: basist_block_format = 38;
pub type basist_block_format = ::std::os::raw::c_int;
pub const basist_basis_texture_type_cBASISTexType2D: basist_basis_texture_type = 0;
pub const basist_basis_texture_type_cBASISTexType2DArray: basist_basis_texture_type = 1;
pub const basist_basis_texture_type_cBASISTexTypeCubemapArray: basist_basis_texture_type = 2;
pub const basist_basis_texture_type_cBASISTexTypeVideoFrames: basist_basis_texture_type = 3;
pub const basist_basis_texture_type_cBASISTexTypeVolume: basist_basis_texture_type = 4;
pub const basist_basis_texture_type_cBASISTexTypeTotal: basist_basis_texture_type = 5;
pub type basist_basis_texture_type = ::std::os::raw::c_uint;
pub const basist_basis_tex_format_cETC1S: basist_basis_tex_format = 0;
pub const basist_basis_tex_format_cUASTC4x4: basist_basis_tex_format = 1;
pub const basist_basis_tex_format_cUASTC_HDR_4x4: basist_basis_tex_format = 2;
pub const basist_basis_tex_format_cASTC_HDR_6x6: basist_basis_tex_format = 3;
pub const basist_basis_tex_format_cASTC_HDR_6x6_INTERMEDIATE: basist_basis_tex_format = 4;
pub const basist_basis_tex_format_cTotalFormats: basist_basis_tex_format = 5;
pub type basist_basis_tex_format = ::std::os::raw::c_int;
pub const basist_transcoder_texture_format_cTFETC1_RGB: basist_transcoder_texture_format = 0;
pub const basist_transcoder_texture_format_cTFETC2_RGBA: basist_transcoder_texture_format = 1;
pub const basist_transcoder_texture_format_cTFBC1_RGB: basist_transcoder_texture_format = 2;
pub const basist_transcoder_texture_format_cTFBC3_RGBA: basist_transcoder_texture_format = 3;
pub const basist_transcoder_texture_format_cTFBC4_R: basist_transcoder_texture_format = 4;
pub const basist_transcoder_texture_format_cTFBC5_RG: basist_transcoder_texture_format = 5;
pub const basist_transcoder_texture_format_cTFBC7_RGBA: basist_transcoder_texture_format = 6;
pub const basist_transcoder_texture_format_cTFPVRTC1_4_RGB: basist_transcoder_texture_format = 8;
pub const basist_transcoder_texture_format_cTFPVRTC1_4_RGBA: basist_transcoder_texture_format = 9;
pub const basist_transcoder_texture_format_cTFASTC_4x4_RGBA: basist_transcoder_texture_format = 10;
pub const basist_transcoder_texture_format_cTFATC_RGB: basist_transcoder_texture_format = 11;
pub const basist_transcoder_texture_format_cTFATC_RGBA: basist_transcoder_texture_format = 12;
pub const basist_transcoder_texture_format_cTFFXT1_RGB: basist_transcoder_texture_format = 17;
pub const basist_transcoder_texture_format_cTFPVRTC2_4_RGB: basist_transcoder_texture_format = 18;
pub const basist_transcoder_texture_format_cTFPVRTC2_4_RGBA: basist_transcoder_texture_format = 19;
pub const basist_transcoder_texture_format_cTFETC2_EAC_R11: basist_transcoder_texture_format = 20;
pub const basist_transcoder_texture_format_cTFETC2_EAC_RG11: basist_transcoder_texture_format = 21;
pub const basist_transcoder_texture_format_cTFBC6H: basist_transcoder_texture_format = 22;
pub const basist_transcoder_texture_format_cTFASTC_HDR_4x4_RGBA: basist_transcoder_texture_format =
    23;
pub const basist_transcoder_texture_format_cTFRGBA32: basist_transcoder_texture_format = 13;
pub const basist_transcoder_texture_format_cTFRGB565: basist_transcoder_texture_format = 14;
pub const basist_transcoder_texture_format_cTFBGR565: basist_transcoder_texture_format = 15;
pub const basist_transcoder_texture_format_cTFRGBA4444: basist_transcoder_texture_format = 16;
pub const basist_transcoder_texture_format_cTFRGB_HALF: basist_transcoder_texture_format = 24;
pub const basist_transcoder_texture_format_cTFRGBA_HALF: basist_transcoder_texture_format = 25;
pub const basist_transcoder_texture_format_cTFRGB_9E5: basist_transcoder_texture_format = 26;
pub const basist_transcoder_texture_format_cTFASTC_HDR_6x6_RGBA: basist_transcoder_texture_format =
    27;
pub const basist_transcoder_texture_format_cTFTotalTextureFormats:
    basist_transcoder_texture_format = 28;
pub const basist_transcoder_texture_format_cTFETC1: basist_transcoder_texture_format = 0;
pub const basist_transcoder_texture_format_cTFETC2: basist_transcoder_texture_format = 1;
pub const basist_transcoder_texture_format_cTFBC1: basist_transcoder_texture_format = 2;
pub const basist_transcoder_texture_format_cTFBC3: basist_transcoder_texture_format = 3;
pub const basist_transcoder_texture_format_cTFBC4: basist_transcoder_texture_format = 4;
pub const basist_transcoder_texture_format_cTFBC5: basist_transcoder_texture_format = 5;
pub const basist_transcoder_texture_format_cTFBC7_M6_RGB: basist_transcoder_texture_format = 6;
pub const basist_transcoder_texture_format_cTFBC7_M5_RGBA: basist_transcoder_texture_format = 6;
pub const basist_transcoder_texture_format_cTFBC7_M6_OPAQUE_ONLY: basist_transcoder_texture_format =
    6;
pub const basist_transcoder_texture_format_cTFBC7_M5: basist_transcoder_texture_format = 6;
pub const basist_transcoder_texture_format_cTFBC7_ALT: basist_transcoder_texture_format = 7;
pub const basist_transcoder_texture_format_cTFASTC_4x4: basist_transcoder_texture_format = 10;
pub const basist_transcoder_texture_format_cTFATC_RGBA_INTERPOLATED_ALPHA:
    basist_transcoder_texture_format = 12;
pub type basist_transcoder_texture_format = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(8))]
pub struct basist_basisu_transcoder_state {
    pub _bindgen_opaque_blob: [u64; 102usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct basist_basisu_transcoder_state_block_preds {
    pub m_endpoint_index: u16,
    pub m_pred_bits: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of basist_basisu_transcoder_state_block_preds"]
        [::std::mem::size_of::<basist_basisu_transcoder_state_block_preds>() - 4usize];
    ["Alignment of basist_basisu_transcoder_state_block_preds"]
        [::std::mem::align_of::<basist_basisu_transcoder_state_block_preds>() - 2usize];
    ["Offset of field: basist_basisu_transcoder_state_block_preds::m_endpoint_index"][::std::mem::offset_of!(
        basist_basisu_transcoder_state_block_preds,
        m_endpoint_index
    ) - 0usize];
    ["Offset of field: basist_basisu_transcoder_state_block_preds::m_pred_bits"]
        [::std::mem::offset_of!(basist_basisu_transcoder_state_block_preds, m_pred_bits) - 2usize];
};
pub const basist_basisu_transcoder_state_cMaxPrevFrameLevels:
    basist_basisu_transcoder_state__bindgen_ty_1 = 16;
pub type basist_basisu_transcoder_state__bindgen_ty_1 = ::std::os::raw::c_uint;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of basist_basisu_transcoder_state"]
        [::std::mem::size_of::<basist_basisu_transcoder_state>() - 816usize];
    ["Alignment of basist_basisu_transcoder_state"]
        [::std::mem::align_of::<basist_basisu_transcoder_state>() - 8usize];
};
pub const basist_basisu_decode_flags_cDecodeFlagsPVRTCDecodeToNextPow2: basist_basisu_decode_flags =
    2;
pub const basist_basisu_decode_flags_cDecodeFlagsTranscodeAlphaDataToOpaqueFormats:
    basist_basisu_decode_flags = 4;
pub const basist_basisu_decode_flags_cDecodeFlagsBC1ForbidThreeColorBlocks:
    basist_basisu_decode_flags = 8;
pub const basist_basisu_decode_flags_cDecodeFlagsOutputHasAlphaIndices: basist_basisu_decode_flags =
    16;
pub const basist_basisu_decode_flags_cDecodeFlagsHighQuality: basist_basisu_decode_flags = 32;
pub const basist_basisu_decode_flags_cDecodeFlagsNoETC1SChromaFiltering:
    basist_basisu_decode_flags = 64;
pub type basist_basisu_decode_flags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct basist_basisu_image_info {
    pub m_image_index: u32,
    pub m_total_levels: u32,
    pub m_orig_width: u32,
    pub m_orig_height: u32,
    pub m_width: u32,
    pub m_height: u32,
    pub m_block_width: u32,
    pub m_block_height: u32,
    pub m_num_blocks_x: u32,
    pub m_num_blocks_y: u32,
    pub m_total_blocks: u32,
    pub m_first_slice_index: u32,
    pub m_alpha_flag: bool,
    pub m_iframe_flag: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of basist_basisu_image_info"]
        [::std::mem::size_of::<basist_basisu_image_info>() - 52usize];
    ["Alignment of basist_basisu_image_info"]
        [::std::mem::align_of::<basist_basisu_image_info>() - 4usize];
    ["Offset of field: basist_basisu_image_info::m_image_index"]
        [::std::mem::offset_of!(basist_basisu_image_info, m_image_index) - 0usize];
    ["Offset of field: basist_basisu_image_info::m_total_levels"]
        [::std::mem::offset_of!(basist_basisu_image_info, m_total_levels) - 4usize];
    ["Offset of field: basist_basisu_image_info::m_orig_width"]
        [::std::mem::offset_of!(basist_basisu_image_info, m_orig_width) - 8usize];
    ["Offset of field: basist_basisu_image_info::m_orig_height"]
        [::std::mem::offset_of!(basist_basisu_image_info, m_orig_height) - 12usize];
    ["Offset of field: basist_basisu_image_info::m_width"]
        [::std::mem::offset_of!(basist_basisu_image_info, m_width) - 16usize];
    ["Offset of field: basist_basisu_image_info::m_height"]
        [::std::mem::offset_of!(basist_basisu_image_info, m_height) - 20usize];
    ["Offset of field: basist_basisu_image_info::m_block_width"]
        [::std::mem::offset_of!(basist_basisu_image_info, m_block_width) - 24usize];
    ["Offset of field: basist_basisu_image_info::m_block_height"]
        [::std::mem::offset_of!(basist_basisu_image_info, m_block_height) - 28usize];
    ["Offset of field: basist_basisu_image_info::m_num_blocks_x"]
        [::std::mem::offset_of!(basist_basisu_image_info, m_num_blocks_x) - 32usize];
    ["Offset of field: basist_basisu_image_info::m_num_blocks_y"]
        [::std::mem::offset_of!(basist_basisu_image_info, m_num_blocks_y) - 36usize];
    ["Offset of field: basist_basisu_image_info::m_total_blocks"]
        [::std::mem::offset_of!(basist_basisu_image_info, m_total_blocks) - 40usize];
    ["Offset of field: basist_basisu_image_info::m_first_slice_index"]
        [::std::mem::offset_of!(basist_basisu_image_info, m_first_slice_index) - 44usize];
    ["Offset of field: basist_basisu_image_info::m_alpha_flag"]
        [::std::mem::offset_of!(basist_basisu_image_info, m_alpha_flag) - 48usize];
    ["Offset of field: basist_basisu_image_info::m_iframe_flag"]
        [::std::mem::offset_of!(basist_basisu_image_info, m_iframe_flag) - 49usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct basist_basisu_image_level_info {
    pub m_image_index: u32,
    pub m_level_index: u32,
    pub m_orig_width: u32,
    pub m_orig_height: u32,
    pub m_width: u32,
    pub m_height: u32,
    pub m_block_width: u32,
    pub m_block_height: u32,
    pub m_num_blocks_x: u32,
    pub m_num_blocks_y: u32,
    pub m_total_blocks: u32,
    pub m_first_slice_index: u32,
    pub m_rgb_file_ofs: u32,
    pub m_rgb_file_len: u32,
    pub m_alpha_file_ofs: u32,
    pub m_alpha_file_len: u32,
    pub m_alpha_flag: bool,
    pub m_iframe_flag: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of basist_basisu_image_level_info"]
        [::std::mem::size_of::<basist_basisu_image_level_info>() - 68usize];
    ["Alignment of basist_basisu_image_level_info"]
        [::std::mem::align_of::<basist_basisu_image_level_info>() - 4usize];
    ["Offset of field: basist_basisu_image_level_info::m_image_index"]
        [::std::mem::offset_of!(basist_basisu_image_level_info, m_image_index) - 0usize];
    ["Offset of field: basist_basisu_image_level_info::m_level_index"]
        [::std::mem::offset_of!(basist_basisu_image_level_info, m_level_index) - 4usize];
    ["Offset of field: basist_basisu_image_level_info::m_orig_width"]
        [::std::mem::offset_of!(basist_basisu_image_level_info, m_orig_width) - 8usize];
    ["Offset of field: basist_basisu_image_level_info::m_orig_height"]
        [::std::mem::offset_of!(basist_basisu_image_level_info, m_orig_height) - 12usize];
    ["Offset of field: basist_basisu_image_level_info::m_width"]
        [::std::mem::offset_of!(basist_basisu_image_level_info, m_width) - 16usize];
    ["Offset of field: basist_basisu_image_level_info::m_height"]
        [::std::mem::offset_of!(basist_basisu_image_level_info, m_height) - 20usize];
    ["Offset of field: basist_basisu_image_level_info::m_block_width"]
        [::std::mem::offset_of!(basist_basisu_image_level_info, m_block_width) - 24usize];
    ["Offset of field: basist_basisu_image_level_info::m_block_height"]
        [::std::mem::offset_of!(basist_basisu_image_level_info, m_block_height) - 28usize];
    ["Offset of field: basist_basisu_image_level_info::m_num_blocks_x"]
        [::std::mem::offset_of!(basist_basisu_image_level_info, m_num_blocks_x) - 32usize];
    ["Offset of field: basist_basisu_image_level_info::m_num_blocks_y"]
        [::std::mem::offset_of!(basist_basisu_image_level_info, m_num_blocks_y) - 36usize];
    ["Offset of field: basist_basisu_image_level_info::m_total_blocks"]
        [::std::mem::offset_of!(basist_basisu_image_level_info, m_total_blocks) - 40usize];
    ["Offset of field: basist_basisu_image_level_info::m_first_slice_index"]
        [::std::mem::offset_of!(basist_basisu_image_level_info, m_first_slice_index) - 44usize];
    ["Offset of field: basist_basisu_image_level_info::m_rgb_file_ofs"]
        [::std::mem::offset_of!(basist_basisu_image_level_info, m_rgb_file_ofs) - 48usize];
    ["Offset of field: basist_basisu_image_level_info::m_rgb_file_len"]
        [::std::mem::offset_of!(basist_basisu_image_level_info, m_rgb_file_len) - 52usize];
    ["Offset of field: basist_basisu_image_level_info::m_alpha_file_ofs"]
        [::std::mem::offset_of!(basist_basisu_image_level_info, m_alpha_file_ofs) - 56usize];
    ["Offset of field: basist_basisu_image_level_info::m_alpha_file_len"]
        [::std::mem::offset_of!(basist_basisu_image_level_info, m_alpha_file_len) - 60usize];
    ["Offset of field: basist_basisu_image_level_info::m_alpha_flag"]
        [::std::mem::offset_of!(basist_basisu_image_level_info, m_alpha_flag) - 64usize];
    ["Offset of field: basist_basisu_image_level_info::m_iframe_flag"]
        [::std::mem::offset_of!(basist_basisu_image_level_info, m_iframe_flag) - 65usize];
};
pub const basist_ktx2_df_channel_id_KTX2_DF_CHANNEL_ETC1S_RGB: basist_ktx2_df_channel_id = 0;
pub const basist_ktx2_df_channel_id_KTX2_DF_CHANNEL_ETC1S_RRR: basist_ktx2_df_channel_id = 3;
pub const basist_ktx2_df_channel_id_KTX2_DF_CHANNEL_ETC1S_GGG: basist_ktx2_df_channel_id = 4;
pub const basist_ktx2_df_channel_id_KTX2_DF_CHANNEL_ETC1S_AAA: basist_ktx2_df_channel_id = 15;
pub const basist_ktx2_df_channel_id_KTX2_DF_CHANNEL_UASTC_DATA: basist_ktx2_df_channel_id = 0;
pub const basist_ktx2_df_channel_id_KTX2_DF_CHANNEL_UASTC_RGB: basist_ktx2_df_channel_id = 0;
pub const basist_ktx2_df_channel_id_KTX2_DF_CHANNEL_UASTC_RGBA: basist_ktx2_df_channel_id = 3;
pub const basist_ktx2_df_channel_id_KTX2_DF_CHANNEL_UASTC_RRR: basist_ktx2_df_channel_id = 4;
pub const basist_ktx2_df_channel_id_KTX2_DF_CHANNEL_UASTC_RRRG: basist_ktx2_df_channel_id = 5;
pub const basist_ktx2_df_channel_id_KTX2_DF_CHANNEL_UASTC_RG: basist_ktx2_df_channel_id = 6;
pub type basist_ktx2_df_channel_id = ::std::os::raw::c_uint;
pub const basist_ktx2_df_color_primaries_KTX2_DF_PRIMARIES_UNSPECIFIED:
    basist_ktx2_df_color_primaries = 0;
pub const basist_ktx2_df_color_primaries_KTX2_DF_PRIMARIES_BT709: basist_ktx2_df_color_primaries =
    1;
pub const basist_ktx2_df_color_primaries_KTX2_DF_PRIMARIES_SRGB: basist_ktx2_df_color_primaries = 1;
pub const basist_ktx2_df_color_primaries_KTX2_DF_PRIMARIES_BT601_EBU:
    basist_ktx2_df_color_primaries = 2;
pub const basist_ktx2_df_color_primaries_KTX2_DF_PRIMARIES_BT601_SMPTE:
    basist_ktx2_df_color_primaries = 3;
pub const basist_ktx2_df_color_primaries_KTX2_DF_PRIMARIES_BT2020: basist_ktx2_df_color_primaries =
    4;
pub const basist_ktx2_df_color_primaries_KTX2_DF_PRIMARIES_CIEXYZ: basist_ktx2_df_color_primaries =
    5;
pub const basist_ktx2_df_color_primaries_KTX2_DF_PRIMARIES_ACES: basist_ktx2_df_color_primaries = 6;
pub const basist_ktx2_df_color_primaries_KTX2_DF_PRIMARIES_ACESCC: basist_ktx2_df_color_primaries =
    7;
pub const basist_ktx2_df_color_primaries_KTX2_DF_PRIMARIES_NTSC1953:
    basist_ktx2_df_color_primaries = 8;
pub const basist_ktx2_df_color_primaries_KTX2_DF_PRIMARIES_PAL525: basist_ktx2_df_color_primaries =
    9;
pub const basist_ktx2_df_color_primaries_KTX2_DF_PRIMARIES_DISPLAYP3:
    basist_ktx2_df_color_primaries = 10;
pub const basist_ktx2_df_color_primaries_KTX2_DF_PRIMARIES_ADOBERGB:
    basist_ktx2_df_color_primaries = 11;
pub type basist_ktx2_df_color_primaries = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct basist_ktx2_image_level_info {
    pub m_level_index: u32,
    pub m_layer_index: u32,
    pub m_face_index: u32,
    pub m_orig_width: u32,
    pub m_orig_height: u32,
    pub m_width: u32,
    pub m_height: u32,
    pub m_num_blocks_x: u32,
    pub m_num_blocks_y: u32,
    pub m_block_width: u32,
    pub m_block_height: u32,
    pub m_total_blocks: u32,
    pub m_alpha_flag: bool,
    pub m_iframe_flag: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of basist_ktx2_image_level_info"]
        [::std::mem::size_of::<basist_ktx2_image_level_info>() - 52usize];
    ["Alignment of basist_ktx2_image_level_info"]
        [::std::mem::align_of::<basist_ktx2_image_level_info>() - 4usize];
    ["Offset of field: basist_ktx2_image_level_info::m_level_index"]
        [::std::mem::offset_of!(basist_ktx2_image_level_info, m_level_index) - 0usize];
    ["Offset of field: basist_ktx2_image_level_info::m_layer_index"]
        [::std::mem::offset_of!(basist_ktx2_image_level_info, m_layer_index) - 4usize];
    ["Offset of field: basist_ktx2_image_level_info::m_face_index"]
        [::std::mem::offset_of!(basist_ktx2_image_level_info, m_face_index) - 8usize];
    ["Offset of field: basist_ktx2_image_level_info::m_orig_width"]
        [::std::mem::offset_of!(basist_ktx2_image_level_info, m_orig_width) - 12usize];
    ["Offset of field: basist_ktx2_image_level_info::m_orig_height"]
        [::std::mem::offset_of!(basist_ktx2_image_level_info, m_orig_height) - 16usize];
    ["Offset of field: basist_ktx2_image_level_info::m_width"]
        [::std::mem::offset_of!(basist_ktx2_image_level_info, m_width) - 20usize];
    ["Offset of field: basist_ktx2_image_level_info::m_height"]
        [::std::mem::offset_of!(basist_ktx2_image_level_info, m_height) - 24usize];
    ["Offset of field: basist_ktx2_image_level_info::m_num_blocks_x"]
        [::std::mem::offset_of!(basist_ktx2_image_level_info, m_num_blocks_x) - 28usize];
    ["Offset of field: basist_ktx2_image_level_info::m_num_blocks_y"]
        [::std::mem::offset_of!(basist_ktx2_image_level_info, m_num_blocks_y) - 32usize];
    ["Offset of field: basist_ktx2_image_level_info::m_block_width"]
        [::std::mem::offset_of!(basist_ktx2_image_level_info, m_block_width) - 36usize];
    ["Offset of field: basist_ktx2_image_level_info::m_block_height"]
        [::std::mem::offset_of!(basist_ktx2_image_level_info, m_block_height) - 40usize];
    ["Offset of field: basist_ktx2_image_level_info::m_total_blocks"]
        [::std::mem::offset_of!(basist_ktx2_image_level_info, m_total_blocks) - 44usize];
    ["Offset of field: basist_ktx2_image_level_info::m_alpha_flag"]
        [::std::mem::offset_of!(basist_ktx2_image_level_info, m_alpha_flag) - 48usize];
    ["Offset of field: basist_ktx2_image_level_info::m_iframe_flag"]
        [::std::mem::offset_of!(basist_ktx2_image_level_info, m_iframe_flag) - 49usize];
};
#[repr(C)]
pub struct basist_ktx2_transcoder_state {
    pub m_transcoder_state: basist_basisu_transcoder_state,
    pub m_level_uncomp_data: basisu_uint8_vec,
    pub m_uncomp_data_level_index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of basist_ktx2_transcoder_state"]
        [::std::mem::size_of::<basist_ktx2_transcoder_state>() - 848usize];
    ["Alignment of basist_ktx2_transcoder_state"]
        [::std::mem::align_of::<basist_ktx2_transcoder_state>() - 8usize];
    ["Offset of field: basist_ktx2_transcoder_state::m_transcoder_state"]
        [::std::mem::offset_of!(basist_ktx2_transcoder_state, m_transcoder_state) - 0usize];
    ["Offset of field: basist_ktx2_transcoder_state::m_level_uncomp_data"]
        [::std::mem::offset_of!(basist_ktx2_transcoder_state, m_level_uncomp_data) - 816usize];
    ["Offset of field: basist_ktx2_transcoder_state::m_uncomp_data_level_index"][::std::mem::offset_of!(
        basist_ktx2_transcoder_state,
        m_uncomp_data_level_index
    ) - 840usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BasisUniversalFileInfo {
    pub m_version: u32,
    pub m_total_header_size: u32,
    pub m_total_selectors: u32,
    pub m_selector_codebook_ofs: u32,
    pub m_selector_codebook_size: u32,
    pub m_total_endpoints: u32,
    pub m_endpoint_codebook_ofs: u32,
    pub m_endpoint_codebook_size: u32,
    pub m_tables_ofs: u32,
    pub m_tables_size: u32,
    pub m_slices_size: u32,
    pub m_tex_type: basist_basis_texture_type,
    pub m_us_per_frame: u32,
    pub m_total_images: u32,
    pub m_userdata0: u32,
    pub m_userdata1: u32,
    pub m_tex_format: basist_basis_tex_format,
    pub m_y_flipped: bool,
    pub m_etc1s: bool,
    pub m_has_alpha_slices: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of BasisUniversalFileInfo"][::std::mem::size_of::<BasisUniversalFileInfo>() - 72usize];
    ["Alignment of BasisUniversalFileInfo"]
        [::std::mem::align_of::<BasisUniversalFileInfo>() - 4usize];
    ["Offset of field: BasisUniversalFileInfo::m_version"]
        [::std::mem::offset_of!(BasisUniversalFileInfo, m_version) - 0usize];
    ["Offset of field: BasisUniversalFileInfo::m_total_header_size"]
        [::std::mem::offset_of!(BasisUniversalFileInfo, m_total_header_size) - 4usize];
    ["Offset of field: BasisUniversalFileInfo::m_total_selectors"]
        [::std::mem::offset_of!(BasisUniversalFileInfo, m_total_selectors) - 8usize];
    ["Offset of field: BasisUniversalFileInfo::m_selector_codebook_ofs"]
        [::std::mem::offset_of!(BasisUniversalFileInfo, m_selector_codebook_ofs) - 12usize];
    ["Offset of field: BasisUniversalFileInfo::m_selector_codebook_size"]
        [::std::mem::offset_of!(BasisUniversalFileInfo, m_selector_codebook_size) - 16usize];
    ["Offset of field: BasisUniversalFileInfo::m_total_endpoints"]
        [::std::mem::offset_of!(BasisUniversalFileInfo, m_total_endpoints) - 20usize];
    ["Offset of field: BasisUniversalFileInfo::m_endpoint_codebook_ofs"]
        [::std::mem::offset_of!(BasisUniversalFileInfo, m_endpoint_codebook_ofs) - 24usize];
    ["Offset of field: BasisUniversalFileInfo::m_endpoint_codebook_size"]
        [::std::mem::offset_of!(BasisUniversalFileInfo, m_endpoint_codebook_size) - 28usize];
    ["Offset of field: BasisUniversalFileInfo::m_tables_ofs"]
        [::std::mem::offset_of!(BasisUniversalFileInfo, m_tables_ofs) - 32usize];
    ["Offset of field: BasisUniversalFileInfo::m_tables_size"]
        [::std::mem::offset_of!(BasisUniversalFileInfo, m_tables_size) - 36usize];
    ["Offset of field: BasisUniversalFileInfo::m_slices_size"]
        [::std::mem::offset_of!(BasisUniversalFileInfo, m_slices_size) - 40usize];
    ["Offset of field: BasisUniversalFileInfo::m_tex_type"]
        [::std::mem::offset_of!(BasisUniversalFileInfo, m_tex_type) - 44usize];
    ["Offset of field: BasisUniversalFileInfo::m_us_per_frame"]
        [::std::mem::offset_of!(BasisUniversalFileInfo, m_us_per_frame) - 48usize];
    ["Offset of field: BasisUniversalFileInfo::m_total_images"]
        [::std::mem::offset_of!(BasisUniversalFileInfo, m_total_images) - 52usize];
    ["Offset of field: BasisUniversalFileInfo::m_userdata0"]
        [::std::mem::offset_of!(BasisUniversalFileInfo, m_userdata0) - 56usize];
    ["Offset of field: BasisUniversalFileInfo::m_userdata1"]
        [::std::mem::offset_of!(BasisUniversalFileInfo, m_userdata1) - 60usize];
    ["Offset of field: BasisUniversalFileInfo::m_tex_format"]
        [::std::mem::offset_of!(BasisUniversalFileInfo, m_tex_format) - 64usize];
    ["Offset of field: BasisUniversalFileInfo::m_y_flipped"]
        [::std::mem::offset_of!(BasisUniversalFileInfo, m_y_flipped) - 68usize];
    ["Offset of field: BasisUniversalFileInfo::m_etc1s"]
        [::std::mem::offset_of!(BasisUniversalFileInfo, m_etc1s) - 69usize];
    ["Offset of field: BasisUniversalFileInfo::m_has_alpha_slices"]
        [::std::mem::offset_of!(BasisUniversalFileInfo, m_has_alpha_slices) - 70usize];
};
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct BasisUniversalTranscoder {
    pub _bindgen_opaque_blob: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of BasisUniversalTranscoder"]
        [::std::mem::size_of::<BasisUniversalTranscoder>() - 8usize];
    ["Alignment of BasisUniversalTranscoder"]
        [::std::mem::align_of::<BasisUniversalTranscoder>() - 8usize];
};
unsafe extern "C" {
    pub fn basis_universal_transcoder_new() -> *mut BasisUniversalTranscoder;
}
unsafe extern "C" {
    pub fn basis_universal_transcoder_delete(transcoder: *mut BasisUniversalTranscoder);
}
unsafe extern "C" {
    pub fn basis_universal_transcoder_validate_file_checksums(
        transcoder: *const BasisUniversalTranscoder,
        pData: *const ::std::os::raw::c_void,
        data_size: u32,
        full_validation: bool,
    ) -> bool;
}
unsafe extern "C" {
    pub fn basis_universal_transcoder_validate_header(
        transcoder: *const BasisUniversalTranscoder,
        pData: *const ::std::os::raw::c_void,
        data_size: u32,
    ) -> bool;
}
unsafe extern "C" {
    pub fn basis_universal_transcoder_get_texture_type(
        transcoder: *const BasisUniversalTranscoder,
        pData: *const ::std::os::raw::c_void,
        data_size: u32,
    ) -> basist_basis_texture_type;
}
unsafe extern "C" {
    pub fn basis_universal_transcoder_get_userdata(
        transcoder: *const BasisUniversalTranscoder,
        pData: *const ::std::os::raw::c_void,
        data_size: u32,
        userdata0: *mut u32,
        userdata1: *mut u32,
    ) -> bool;
}
unsafe extern "C" {
    pub fn basis_universal_transcoder_get_total_images(
        transcoder: *const BasisUniversalTranscoder,
        pData: *const ::std::os::raw::c_void,
        data_size: u32,
    ) -> u32;
}
unsafe extern "C" {
    pub fn basis_universal_transcoder_get_tex_format(
        transcoder: *const BasisUniversalTranscoder,
        pData: *const ::std::os::raw::c_void,
        data_size: u32,
    ) -> basist_basis_tex_format;
}
unsafe extern "C" {
    pub fn basis_universal_transcoder_get_total_image_levels(
        transcoder: *const BasisUniversalTranscoder,
        pData: *const ::std::os::raw::c_void,
        data_size: u32,
        image_index: u32,
    ) -> u32;
}
unsafe extern "C" {
    pub fn basis_universal_transcoder_get_image_level_desc(
        transcoder: *const BasisUniversalTranscoder,
        pData: *const ::std::os::raw::c_void,
        data_size: u32,
        image_index: u32,
        level_index: u32,
        orig_width: *mut u32,
        orig_height: *mut u32,
        total_blocks: *mut u32,
    ) -> bool;
}
unsafe extern "C" {
    pub fn basis_universal_transcoder_get_image_info(
        transcoder: *const BasisUniversalTranscoder,
        pData: *const ::std::os::raw::c_void,
        data_size: u32,
        image_info: *mut basist_basisu_image_info,
        image_index: u32,
    ) -> bool;
}
unsafe extern "C" {
    pub fn basis_universal_transcoder_get_image_level_info(
        transcoder: *const BasisUniversalTranscoder,
        pData: *const ::std::os::raw::c_void,
        data_size: u32,
        level_info: *mut basist_basisu_image_level_info,
        image_index: u32,
        level_index: u32,
    ) -> bool;
}
unsafe extern "C" {
    pub fn basis_universal_transcoder_get_file_info(
        transcoder: *mut BasisUniversalTranscoder,
        pData: *const ::std::os::raw::c_void,
        data_size: u32,
        file_info: *mut BasisUniversalFileInfo,
    ) -> bool;
}
unsafe extern "C" {
    pub fn basis_universal_transcoder_start_transcoding(
        transcoder: *mut BasisUniversalTranscoder,
        pData: *const ::std::os::raw::c_void,
        data_size: u32,
    ) -> bool;
}
unsafe extern "C" {
    pub fn basis_universal_transcoder_stop_transcoding(
        transcoder: *mut BasisUniversalTranscoder
    ) -> bool;
}
unsafe extern "C" {
    pub fn basis_universal_transcoder_get_ready_to_transcode(
        transcoder: *const BasisUniversalTranscoder
    ) -> bool;
}
unsafe extern "C" {
    pub fn basis_universal_transcoder_transcode_image_level(
        transcoder: *mut BasisUniversalTranscoder,
        pData: *const ::std::os::raw::c_void,
        data_size: u32,
        image_index: u32,
        level_index: u32,
        pOutput_blocks: *mut ::std::os::raw::c_void,
        output_blocks_buf_size_in_blocks_or_pixels: u32,
        fmt: basist_transcoder_texture_format,
        decode_flags: basist_basisu_decode_flags,
        output_row_pitch_in_blocks_or_pixels: u32,
        pState: *mut basist_basisu_transcoder_state,
        output_rows_in_pixels: u32,
    ) -> bool;
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct Ktx2Transcoder {
    pub _bindgen_opaque_blob: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Ktx2Transcoder"][::std::mem::size_of::<Ktx2Transcoder>() - 8usize];
    ["Alignment of Ktx2Transcoder"][::std::mem::align_of::<Ktx2Transcoder>() - 8usize];
};
unsafe extern "C" {
    pub fn ktx2_transcoder_new() -> *mut Ktx2Transcoder;
}
unsafe extern "C" {
    pub fn ktx2_transcoder_init(
        transcoder: *mut Ktx2Transcoder,
        data: *const ::std::os::raw::c_void,
        data_size: u32,
    ) -> bool;
}
unsafe extern "C" {
    pub fn ktx2_transcoder_delete(transcoder: *mut Ktx2Transcoder);
}
unsafe extern "C" {
    pub fn ktx2_get_is_hdr(transcoder: *const Ktx2Transcoder) -> bool;
}
unsafe extern "C" {
    pub fn ktx2_get_is_ldr(transcoder: *const Ktx2Transcoder) -> bool;
}
unsafe extern "C" {
    pub fn ktx2_get_is_hdr_4x4(transcoder: *const Ktx2Transcoder) -> bool;
}
unsafe extern "C" {
    pub fn ktx2_get_is_hdr_6x6(transcoder: *const Ktx2Transcoder) -> bool;
}
unsafe extern "C" {
    pub fn ktx2_get_is_video(transcoder: *const Ktx2Transcoder) -> bool;
}
unsafe extern "C" {
    pub fn ktx2_get_is_uastc(transcoder: *const Ktx2Transcoder) -> bool;
}
unsafe extern "C" {
    pub fn ktx2_get_is_etc1s(transcoder: *const Ktx2Transcoder) -> bool;
}
unsafe extern "C" {
    pub fn ktx2_get_is_srgb(transcoder: *const Ktx2Transcoder) -> bool;
}
unsafe extern "C" {
    pub fn ktx2_get_is_linear(transcoder: *const Ktx2Transcoder) -> bool;
}
unsafe extern "C" {
    pub fn ktx2_get_has_alpha(transcoder: *const Ktx2Transcoder) -> bool;
}
unsafe extern "C" {
    pub fn ktx2_get_dfd_channel_id0(transcoder: *const Ktx2Transcoder)
        -> basist_ktx2_df_channel_id;
}
unsafe extern "C" {
    pub fn ktx2_get_dfd_channel_id1(transcoder: *const Ktx2Transcoder)
        -> basist_ktx2_df_channel_id;
}
unsafe extern "C" {
    pub fn ktx2_get_dfd_color_primaries(
        transcoder: *const Ktx2Transcoder
    ) -> basist_ktx2_df_color_primaries;
}
unsafe extern "C" {
    pub fn ktx2_get_dfd_color_model(transcoder: *const Ktx2Transcoder) -> u32;
}
unsafe extern "C" {
    pub fn ktx2_get_dfd_flags(transcoder: *const Ktx2Transcoder) -> u32;
}
unsafe extern "C" {
    pub fn ktx2_get_dfd_total_samples(transcoder: *const Ktx2Transcoder) -> u32;
}
unsafe extern "C" {
    pub fn ktx2_get_block_width(transcoder: *const Ktx2Transcoder) -> u32;
}
unsafe extern "C" {
    pub fn ktx2_get_block_height(transcoder: *const Ktx2Transcoder) -> u32;
}
unsafe extern "C" {
    pub fn ktx2_get_layers(transcoder: *const Ktx2Transcoder) -> u32;
}
unsafe extern "C" {
    pub fn ktx2_get_levels(transcoder: *const Ktx2Transcoder) -> u32;
}
unsafe extern "C" {
    pub fn ktx2_get_faces(transcoder: *const Ktx2Transcoder) -> u32;
}
unsafe extern "C" {
    pub fn ktx2_get_pixel_depth(transcoder: *const Ktx2Transcoder) -> u32;
}
unsafe extern "C" {
    pub fn ktx2_get_basis_tex_format(transcoder: *const Ktx2Transcoder) -> basist_basis_tex_format;
}
unsafe extern "C" {
    pub fn ktx2_start_transcoding(transcoder: *const Ktx2Transcoder) -> bool;
}
unsafe extern "C" {
    pub fn ktx2_get_image_level_info(
        transcoder: *const Ktx2Transcoder,
        level_info: *mut basist_ktx2_image_level_info,
        level_index: u32,
        layer_index: u32,
        face_index: u32,
    ) -> bool;
}
unsafe extern "C" {
    pub fn ktx2_transcoder_transcode_image_level(
        transcoder: *mut Ktx2Transcoder,
        level_index: u32,
        layer_index: u32,
        face_index: u32,
        pOutput_blocks: *mut ::std::os::raw::c_void,
        output_blocks_buf_size_in_blocks_or_pixels: u32,
        fmt: basist_transcoder_texture_format,
        decode_flags: u32,
        output_row_pitch_in_blocks_or_pixels: u32,
        output_rows_in_pixels: u32,
        channel0: ::std::os::raw::c_int,
        channel1: ::std::os::raw::c_int,
        pState: *mut basist_ktx2_transcoder_state,
    ) -> bool;
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct LowLevelUastcLdr4x4Transcoder {
    pub _bindgen_opaque_blob: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LowLevelUastcLdr4x4Transcoder"]
        [::std::mem::size_of::<LowLevelUastcLdr4x4Transcoder>() - 8usize];
    ["Alignment of LowLevelUastcLdr4x4Transcoder"]
        [::std::mem::align_of::<LowLevelUastcLdr4x4Transcoder>() - 8usize];
};
unsafe extern "C" {
    pub fn low_level_uastc_ldr_4x4_transcoder_new() -> *mut LowLevelUastcLdr4x4Transcoder;
}
unsafe extern "C" {
    pub fn low_level_uastc_ldr_4x4_transcoder_delete(
        transcoder: *mut LowLevelUastcLdr4x4Transcoder
    );
}
unsafe extern "C" {
    pub fn low_level_uastc_ldr_4x4_transcoder_transcode_slice(
        transcoder: *mut LowLevelUastcLdr4x4Transcoder,
        pDst_blocks: *mut ::std::os::raw::c_void,
        num_blocks_x: u32,
        num_blocks_y: u32,
        pImage_data: *const u8,
        image_data_size: u32,
        fmt: basist_block_format,
        output_block_or_pixel_stride_in_bytes: u32,
        bc1_allow_threecolor_blocks: bool,
        has_alpha: bool,
        orig_width: u32,
        orig_height: u32,
        output_row_pitch_in_blocks_or_pixels: u32,
        pState: *mut basist_basisu_transcoder_state,
        output_rows_in_pixels: u32,
        channel0: ::std::os::raw::c_int,
        channel1: ::std::os::raw::c_int,
        decode_flags: i32,
    ) -> bool;
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct LowLevelUastcHdr4x4Transcoder {
    pub _bindgen_opaque_blob: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LowLevelUastcHdr4x4Transcoder"]
        [::std::mem::size_of::<LowLevelUastcHdr4x4Transcoder>() - 8usize];
    ["Alignment of LowLevelUastcHdr4x4Transcoder"]
        [::std::mem::align_of::<LowLevelUastcHdr4x4Transcoder>() - 8usize];
};
unsafe extern "C" {
    pub fn low_level_uastc_hdr_4x4_transcoder_new() -> *mut LowLevelUastcHdr4x4Transcoder;
}
unsafe extern "C" {
    pub fn low_level_uastc_hdr_4x4_transcoder_delete(
        transcoder: *mut LowLevelUastcHdr4x4Transcoder
    );
}
unsafe extern "C" {
    pub fn low_level_uastc_hdr_4x4_transcoder_transcode_slice(
        transcoder: *mut LowLevelUastcHdr4x4Transcoder,
        pDst_blocks: *mut ::std::os::raw::c_void,
        num_blocks_x: u32,
        num_blocks_y: u32,
        pImage_data: *const u8,
        image_data_size: u32,
        fmt: basist_block_format,
        output_block_or_pixel_stride_in_bytes: u32,
        bc1_allow_threecolor_blocks: bool,
        has_alpha: bool,
        orig_width: u32,
        orig_height: u32,
        output_row_pitch_in_blocks_or_pixels: u32,
        pState: *mut basist_basisu_transcoder_state,
        output_rows_in_pixels: u32,
        channel0: ::std::os::raw::c_int,
        channel1: ::std::os::raw::c_int,
        decode_flags: i32,
    ) -> bool;
}
unsafe extern "C" {
    pub fn basis_get_bytes_per_block_or_pixel(fmt: basist_transcoder_texture_format) -> u32;
}
unsafe extern "C" {
    pub fn basis_get_format_name(
        fmt: basist_transcoder_texture_format
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn basis_get_block_format_name(fmt: basist_block_format) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn basis_transcoder_format_has_alpha(fmt: basist_transcoder_texture_format) -> bool;
}
unsafe extern "C" {
    pub fn basis_get_basisu_texture_format(
        fmt: basist_transcoder_texture_format
    ) -> basisu_texture_format;
}
unsafe extern "C" {
    pub fn basis_get_texture_type_name(
        tex_type: basist_basis_texture_type
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn basis_transcoder_format_is_uncompressed(
        tex_type: basist_transcoder_texture_format
    ) -> bool;
}
unsafe extern "C" {
    pub fn basis_block_format_is_uncompressed(fmt: basist_block_format) -> bool;
}
unsafe extern "C" {
    pub fn basis_get_uncompressed_bytes_per_pixel(fmt: basist_transcoder_texture_format) -> u32;
}
unsafe extern "C" {
    pub fn basis_get_block_width(tex_type: basist_transcoder_texture_format) -> u32;
}
unsafe extern "C" {
    pub fn basis_get_block_height(tex_type: basist_transcoder_texture_format) -> u32;
}
unsafe extern "C" {
    pub fn basis_is_format_supported(
        tex_type: basist_transcoder_texture_format,
        fmt: basist_basis_tex_format,
    ) -> bool;
}
unsafe extern "C" {
    pub fn basis_validate_output_buffer_size(
        target_format: basist_transcoder_texture_format,
        output_blocks_buf_size_in_blocks_or_pixels: u32,
        orig_width: u32,
        orig_height: u32,
        output_row_pitch_in_blocks_or_pixels: u32,
        output_rows_in_pixels: u32,
    ) -> bool;
}
unsafe extern "C" {
    pub fn basis_compute_transcoded_image_size_in_bytes(
        target_format: basist_transcoder_texture_format,
        orig_width: u32,
        orig_height: u32,
    ) -> u32;
}
unsafe extern "C" {
    pub fn basisu_transcoder_init();
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: basisu_vector_open0_uint8_t_close0"]
        [::std::mem::size_of::<basisu_vector<u8>>() - 24usize];
    ["Align of template specialization: basisu_vector_open0_uint8_t_close0"]
        [::std::mem::align_of::<basisu_vector<u8>>() - 8usize];
};
